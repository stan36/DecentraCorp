{
  "contractName": "RBLogic",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "name": "IdeaIPFS",
          "type": "string"
        },
        {
          "name": "executed",
          "type": "bool"
        },
        {
          "name": "proposalPassed",
          "type": "bool"
        },
        {
          "name": "numberOfVotes",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "hash",
          "type": "string"
        }
      ],
      "name": "getPropID",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "stakeReplicatorWallet",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_ideaIPFS",
          "type": "string"
        },
        {
          "name": "_globalUseBlockAmount",
          "type": "uint256"
        },
        {
          "name": "_miningTime",
          "type": "uint256"
        },
        {
          "name": "_royalty",
          "type": "uint256"
        },
        {
          "name": "_inventor",
          "type": "address"
        },
        {
          "name": "_invention",
          "type": "address"
        }
      ],
      "name": "generateIdeaBlock",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ideaBlockReward",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "globalBlockHalfTime",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "CPBG",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_member",
          "type": "address"
        }
      ],
      "name": "checkIfMember",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "globalIdeaCount",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "IDC",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "buyMembership",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_dcpoa",
          "type": "address"
        },
        {
          "name": "_IDC",
          "type": "address"
        },
        {
          "name": "_CPBG",
          "type": "address"
        }
      ],
      "name": "setGenerators",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "globalUseBlock",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "minimumQuorum",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "repStake",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "globalRepCount",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getIdeasOwner",
      "outputs": [
        {
          "name": "",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "DCPoA",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "inventions",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "IdeaHash",
          "type": "string"
        }
      ],
      "name": "IdeaProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "_ideahash",
          "type": "string"
        }
      ],
      "name": "IdeaApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "_voter",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "inSupport",
          "type": "bool"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "member",
          "type": "address"
        }
      ],
      "name": "NewMember",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "_repAdd",
          "type": "address"
        }
      ],
      "name": "NewReplication",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipRenounced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_ideaId",
          "type": "uint256"
        },
        {
          "name": "_repAdd",
          "type": "address"
        }
      ],
      "name": "generateReplicationBlock",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newStakeAmount",
          "type": "uint256"
        }
      ],
      "name": "changeStakeAmount",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x6080604052683635c9adc5dea0000060085568056bc75e2d63100000600955336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611f608061006d6000396000f30060806040526004361061013e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063013cf08b1461014357806310734e431461020657806318da0e63146102835780631d28ce3b1461029a5780631ddc883b1461036157806328a6e47c1461038c5780633c91f273146103b75780634951f6aa1461040e5780634cfa24091461046957806352d2c11d146104945780635c581119146104eb5780636da23e40146104f5578063715018a614610578578063758249741461058f5780638160f0b5146105ba5780638da5cb5b146105e55780639f7d89291461063c578063be6cbbcf14610667578063ca79b5a914610692578063daeac7b9146106bf578063e026daa11461072b578063e4fd452414610782578063f2fde38b146107ef578063f8c711fa14610832575b600080fd5b34801561014f57600080fd5b5061016e6004803603810190808035906020019092919050505061087f565b60405180806020018515151515815260200184151515158152602001838152602001828103825286818151815260200191508051906020019080838360005b838110156101c85780820151818401526020810190506101ad565b50505050905090810190601f1680156101f55780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34801561021257600080fd5b5061026d600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610970565b6040518082815260200191505060405180910390f35b34801561028f57600080fd5b506102986109e5565b005b3480156102a657600080fd5b5061035f600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d14565b005b34801561036d57600080fd5b5061037661125d565b6040518082815260200191505060405180910390f35b34801561039857600080fd5b506103a1611263565b6040518082815260200191505060405180910390f35b3480156103c357600080fd5b506103cc611269565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561041a57600080fd5b5061044f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061128f565b604051808215151515815260200191505060405180910390f35b34801561047557600080fd5b5061047e6113a4565b6040518082815260200191505060405180910390f35b3480156104a057600080fd5b506104a96113aa565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6104f36113d0565b005b34801561050157600080fd5b50610576600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611552565b005b34801561058457600080fd5b5061058d611675565b005b34801561059b57600080fd5b506105a4611777565b6040518082815260200191505060405180910390f35b3480156105c657600080fd5b506105cf61177d565b6040518082815260200191505060405180910390f35b3480156105f157600080fd5b506105fa611783565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561064857600080fd5b506106516117a8565b6040518082815260200191505060405180910390f35b34801561067357600080fd5b5061067c6117ae565b6040518082815260200191505060405180910390f35b34801561069e57600080fd5b506106bd600480360381019080803590602001909291905050506117b4565b005b3480156106cb57600080fd5b506106d4611819565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156107175780820151818401526020810190506106fc565b505050509050019250505060405180910390f35b34801561073757600080fd5b506107406118ae565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561078e57600080fd5b506107ad600480360381019080803590602001909291905050506118d4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107fb57600080fd5b50610830600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611912565b005b34801561083e57600080fd5b5061087d60048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611979565b005b600b8181548110151561088e57fe5b9060005260206000209060050201600091509050806000018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561093a5780601f1061090f5761010080835404028352916020019161093a565b820191906000526020600020905b81548152906001019060200180831161091d57829003601f168201915b5050505050908060010160009054906101000a900460ff16908060010160019054906101000a900460ff16908060020154905084565b6000600f826040518082805190602001908083835b6020831015156109aa5780518252602082019150602081019050602083039250610985565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020549050919050565b68056bc75e2d63100000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610aac57600080fd5b505af1158015610ac0573d6000803e3d6000fd5b505050506040513d6020811015610ad657600080fd5b810190808051906020019092919050505010151515610af457600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637130c2413368056bc75e2d631000006040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015610bc257600080fd5b505af1158015610bd6573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631d40bbcf336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015610c9757600080fd5b505af1158015610cab573d6000803e3d6000fd5b505050507fb4dcb6dd550f27b5917ebf674899ea7046ff91790c6f9f01431617ad39819db233604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d6f57600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cb2d97f887878787876040518663ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018681526020018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825287818151815260200191508051906020019080838360005b83811015610e61578082015181840152602081019050610e46565b50505050905090810190601f168015610e8e5780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b158015610eb157600080fd5b505af1158015610ec5573d6000803e3d6000fd5b5050505060046000815480929190600101919050555060011515610ee88361128f565b1515141515610fc757600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631d40bbcf836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015610fae57600080fd5b505af1158015610fc2573d6000803e3d6000fd5b505050505b600c8190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050611035611d20565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d82f980b836008546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156110fd57600080fd5b505af1158015611111573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638f3e9795836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156111d257600080fd5b505af11580156111e6573d6000803e3d6000fd5b50505050601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004549080600181540180825580915050906001820390600052602060002001600090919290919091505550505050505050565b60085481565b60075481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060011515600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663aaa746bb846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561135257600080fd5b505af1158015611366573d6000803e3d6000fd5b505050506040513d602081101561137c57600080fd5b81019080805190602001909291905050501515141561139e576001905061139f565b5b919050565b60045481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b62f0c8a06007540142111515156113e657600080fd5b670de0b6b3a764000034101515156113fd57600080fd5b61140633611d62565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d82f980b3369021e19e0c9bab24000006040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156114d557600080fd5b505af11580156114e9573d6000803e3d6000fd5b505050507fb4dcb6dd550f27b5917ebf674899ea7046ff91790c6f9f01431617ad39819db233604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115ad57600080fd5b82600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116d057600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a260008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60065481565b600a5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b60055481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561180f57600080fd5b8060098190555050565b6060601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156118a457602002820191906000526020600020905b815481526020019060010190808311611890575b5050505050905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c818154811015156118e357fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561196d57600080fd5b61197681611e3a565b50565b600115156119863361128f565b151514151561199457600080fd5b600115156119a13361128f565b15151415156119af57600080fd5b600954600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611a6f57600080fd5b505af1158015611a83573d6000803e3d6000fd5b505050506040513d6020811015611a9957600080fd5b810190808051906020019092919050505010151515611ab757600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637130c241336009546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015611b7e57600080fd5b505af1158015611b92573d6000803e3d6000fd5b50505050600560008154809291906001019190505550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e934f00b8383336040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050600060405180830381600087803b158015611ca157600080fd5b505af1158015611cb5573d6000803e3d6000fd5b505050507fe949536157131e1de4cd7b981de0040f0fb98337330cdf262d0fed657681c2f081604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a15050565b60006305a48fba6007540142101515611d59576002600854811515611d4157fe5b04600881905550426007819055506008549050611d5f565b60085490505b90565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631d40bbcf826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015611e1f57600080fd5b505af1158015611e33573d6000803e3d6000fd5b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611e7657600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a72305820e007979d4543129595c9a79b19c5fdf76a0be374f7c65523553f65fab49cf6590029",
  "deployedBytecode": "0x60806040526004361061013e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063013cf08b1461014357806310734e431461020657806318da0e63146102835780631d28ce3b1461029a5780631ddc883b1461036157806328a6e47c1461038c5780633c91f273146103b75780634951f6aa1461040e5780634cfa24091461046957806352d2c11d146104945780635c581119146104eb5780636da23e40146104f5578063715018a614610578578063758249741461058f5780638160f0b5146105ba5780638da5cb5b146105e55780639f7d89291461063c578063be6cbbcf14610667578063ca79b5a914610692578063daeac7b9146106bf578063e026daa11461072b578063e4fd452414610782578063f2fde38b146107ef578063f8c711fa14610832575b600080fd5b34801561014f57600080fd5b5061016e6004803603810190808035906020019092919050505061087f565b60405180806020018515151515815260200184151515158152602001838152602001828103825286818151815260200191508051906020019080838360005b838110156101c85780820151818401526020810190506101ad565b50505050905090810190601f1680156101f55780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34801561021257600080fd5b5061026d600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610970565b6040518082815260200191505060405180910390f35b34801561028f57600080fd5b506102986109e5565b005b3480156102a657600080fd5b5061035f600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d14565b005b34801561036d57600080fd5b5061037661125d565b6040518082815260200191505060405180910390f35b34801561039857600080fd5b506103a1611263565b6040518082815260200191505060405180910390f35b3480156103c357600080fd5b506103cc611269565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561041a57600080fd5b5061044f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061128f565b604051808215151515815260200191505060405180910390f35b34801561047557600080fd5b5061047e6113a4565b6040518082815260200191505060405180910390f35b3480156104a057600080fd5b506104a96113aa565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6104f36113d0565b005b34801561050157600080fd5b50610576600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611552565b005b34801561058457600080fd5b5061058d611675565b005b34801561059b57600080fd5b506105a4611777565b6040518082815260200191505060405180910390f35b3480156105c657600080fd5b506105cf61177d565b6040518082815260200191505060405180910390f35b3480156105f157600080fd5b506105fa611783565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561064857600080fd5b506106516117a8565b6040518082815260200191505060405180910390f35b34801561067357600080fd5b5061067c6117ae565b6040518082815260200191505060405180910390f35b34801561069e57600080fd5b506106bd600480360381019080803590602001909291905050506117b4565b005b3480156106cb57600080fd5b506106d4611819565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156107175780820151818401526020810190506106fc565b505050509050019250505060405180910390f35b34801561073757600080fd5b506107406118ae565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561078e57600080fd5b506107ad600480360381019080803590602001909291905050506118d4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107fb57600080fd5b50610830600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611912565b005b34801561083e57600080fd5b5061087d60048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611979565b005b600b8181548110151561088e57fe5b9060005260206000209060050201600091509050806000018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561093a5780601f1061090f5761010080835404028352916020019161093a565b820191906000526020600020905b81548152906001019060200180831161091d57829003601f168201915b5050505050908060010160009054906101000a900460ff16908060010160019054906101000a900460ff16908060020154905084565b6000600f826040518082805190602001908083835b6020831015156109aa5780518252602082019150602081019050602083039250610985565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020549050919050565b68056bc75e2d63100000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015610aac57600080fd5b505af1158015610ac0573d6000803e3d6000fd5b505050506040513d6020811015610ad657600080fd5b810190808051906020019092919050505010151515610af457600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637130c2413368056bc75e2d631000006040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015610bc257600080fd5b505af1158015610bd6573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631d40bbcf336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015610c9757600080fd5b505af1158015610cab573d6000803e3d6000fd5b505050507fb4dcb6dd550f27b5917ebf674899ea7046ff91790c6f9f01431617ad39819db233604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d6f57600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cb2d97f887878787876040518663ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018681526020018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825287818151815260200191508051906020019080838360005b83811015610e61578082015181840152602081019050610e46565b50505050905090810190601f168015610e8e5780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b158015610eb157600080fd5b505af1158015610ec5573d6000803e3d6000fd5b5050505060046000815480929190600101919050555060011515610ee88361128f565b1515141515610fc757600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631d40bbcf836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015610fae57600080fd5b505af1158015610fc2573d6000803e3d6000fd5b505050505b600c8190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050611035611d20565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d82f980b836008546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156110fd57600080fd5b505af1158015611111573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638f3e9795836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156111d257600080fd5b505af11580156111e6573d6000803e3d6000fd5b50505050601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004549080600181540180825580915050906001820390600052602060002001600090919290919091505550505050505050565b60085481565b60075481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060011515600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663aaa746bb846040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561135257600080fd5b505af1158015611366573d6000803e3d6000fd5b505050506040513d602081101561137c57600080fd5b81019080805190602001909291905050501515141561139e576001905061139f565b5b919050565b60045481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b62f0c8a06007540142111515156113e657600080fd5b670de0b6b3a764000034101515156113fd57600080fd5b61140633611d62565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d82f980b3369021e19e0c9bab24000006040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156114d557600080fd5b505af11580156114e9573d6000803e3d6000fd5b505050507fb4dcb6dd550f27b5917ebf674899ea7046ff91790c6f9f01431617ad39819db233604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156115ad57600080fd5b82600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116d057600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a260008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60065481565b600a5481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b60055481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561180f57600080fd5b8060098190555050565b6060601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156118a457602002820191906000526020600020905b815481526020019060010190808311611890575b5050505050905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c818154811015156118e357fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561196d57600080fd5b61197681611e3a565b50565b600115156119863361128f565b151514151561199457600080fd5b600115156119a13361128f565b15151415156119af57600080fd5b600954600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611a6f57600080fd5b505af1158015611a83573d6000803e3d6000fd5b505050506040513d6020811015611a9957600080fd5b810190808051906020019092919050505010151515611ab757600080fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637130c241336009546040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015611b7e57600080fd5b505af1158015611b92573d6000803e3d6000fd5b50505050600560008154809291906001019190505550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e934f00b8383336040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050600060405180830381600087803b158015611ca157600080fd5b505af1158015611cb5573d6000803e3d6000fd5b505050507fe949536157131e1de4cd7b981de0040f0fb98337330cdf262d0fed657681c2f081604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a15050565b60006305a48fba6007540142101515611d59576002600854811515611d4157fe5b04600881905550426007819055506008549050611d5f565b60085490505b90565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631d40bbcf826040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015611e1f57600080fd5b505af1158015611e33573d6000803e3d6000fd5b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611e7657600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a72305820e007979d4543129595c9a79b19c5fdf76a0be374f7c65523553f65fab49cf6590029",
  "sourceMap": "589:1079:4:-;;;4355:22:3;4325:52;;4404:21;4381:44;;575:10:6;567:5;;:18;;;;;;;;;;;;;;;;;;589:1079:4;;;;;;",
  "deployedSourceMap": "589:1079:4:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4508:31:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4508:31:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;4508:31:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8113:88;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8113:88:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8422:235;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8422:235:3;;;;;;991:666:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;991:666:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4325:52:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4325:52:3;;;;;;;;;;;;;;;;;;;;;;;4290:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4290:31:3;;;;;;;;;;;;;;;;;;;;;;;3570:38;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3570:38:3;;;;;;;;;;;;;;;;;;;;;;;;;;;7821:139;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7821:139:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4199:27;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4199:27:3;;;;;;;;;;;;;;;;;;;;;;;3515:19;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3515:19:3;;;;;;;;;;;;;;;;;;;;;;;;;;;6980:259;;;;;;7447:239;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7447:239:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1001:111:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1001:111:6;;;;;;4260:26:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4260:26:3;;;;;;;;;;;;;;;;;;;;;;;4429:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4429:25:3;;;;;;;;;;;;;;;;;;;;;;;238:20:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;238:20:6;;;;;;;;;;;;;;;;;;;;;;;;;;;4381:44:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4381:44:3;;;;;;;;;;;;;;;;;;;;;;;4230:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4230:26:3;;;;;;;;;;;;;;;;;;;;;;;1561:105:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1561:105:4;;;;;;;;;;;;;;;;;;;;;;;;;;8783:91:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8783:91:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;8783:91:3;;;;;;;;;;;;;;;;;3538:28;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3538:28:3;;;;;;;;;;;;;;;;;;;;;;;;;;;4544:27;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4544:27:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1274:103:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1274:103:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;1035:326:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1035:326:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4508:31:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;8113:88::-;8165:4;8183:7;8191:4;8183:13;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;51:19;36:153;;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;8183:13:3;;;;;;;;;;;;;;;;;;;;;;8176:20;;8113:88;;;:::o;8422:235::-;8505:21;8476:3;;;;;;;;;;;:13;;;8490:10;8476:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8476:25:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8476:25:3;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8476:25:3;;;;;;;;;;;;;;;;:50;;8468:59;;;;;;;;8533:5;;;;;;;;;;;:18;;;8552:10;8564:21;8533:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8533:53:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8533:53:3;;;;8592:5;;;;;;;;;;;:16;;;8609:10;8592:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8592:28:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8592:28:3;;;;8631:21;8641:10;8631:21;;;;;;;;;;;;;;;;;;;;;;8422:235::o;991:666:2:-;719:5:6;;;;;;;;;;;705:19;;:10;:19;;;697:28;;;;;;;;1183:5:2;;;;;;;;;;;:23;;;1208:9;1219:21;1242:11;1255:8;1266:9;1183:93;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1183:93:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1183:93:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1183:93:2;;;;1317:15;;:17;;;;;;;;;;;;;1371:4;1343:32;;:24;1357:9;1343:13;:24::i;:::-;:32;;;;1340:74;;;1384:5;;;;;;;;;;;:16;;;1401:9;1384:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1384:27:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1384:27:2;;;;1340:74;1415:10;1431;1415:27;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;1415:27:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1448:19;:17;:19::i;:::-;;1473:5;;;;;;;;;;;:18;;;1493:9;1504:15;;1473:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1473:47:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1473:47:2;;;;1572:5;;;;;;;;;;;:21;;;1594:9;1572:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1572:32:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1572:32:2;;;;1610:9;:20;1620:9;1610:20;;;;;;;;;;;;;;;1636:15;;1610:42;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;1610:42:2;;;;;;;;;;;;;;;;;;;;;;991:666;;;;;;:::o;4325:52:3:-;;;;:::o;4290:31::-;;;;:::o;3570:38::-;;;;;;;;;;;;;:::o;7821:139::-;7881:4;7929;7895:38;;:5;;;;;;;;;;;:20;;;7917:7;7895:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7895:30:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7895:30:3;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7895:30:3;;;;;;;;;;;;;;;;:38;;;7891:67;;;7949:4;7942:11;;;;7891:67;7821:139;;;;:::o;4199:27::-;;;;:::o;3515:19::-;;;;;;;;;;;;;:::o;6980:259::-;7062:16;7040:19;;:38;7033:3;:45;;7025:54;;;;;;;;7106:7;7093:9;:20;;7085:29;;;;;;;;7120:21;7130:10;7120:9;:21::i;:::-;7147:5;;;;;;;;;;;:18;;;7166:10;7178:23;7147:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7147:55:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7147:55:3;;;;7213:21;7223:10;7213:21;;;;;;;;;;;;;;;;;;;;;;6980:259::o;7447:239::-;719:5:6;;;;;;;;;;;705:19;;:10;:19;;;697:28;;;;;;;;7623:6:3;7599:5;;:31;;;;;;;;;;;;;;;;;;7653:4;7638:3;;:20;;;;;;;;;;;;;;;;;;7673:5;7666:4;;:13;;;;;;;;;;;;;;;;;;7447:239;;;:::o;1001:111:6:-;719:5;;;;;;;;;;;705:19;;:10;:19;;;697:28;;;;;;;;1077:5;;;;;;;;;;;1058:25;;;;;;;;;;;;1105:1;1089:5;;:18;;;;;;;;;;;;;;;;;;1001:111::o;4260:26:3:-;;;;:::o;4429:25::-;;;;:::o;238:20:6:-;;;;;;;;;;;;;:::o;4381:44:3:-;;;;:::o;4230:26::-;;;;:::o;1561:105:4:-;719:5:6;;;;;;;;;;;705:19;;:10;:19;;;697:28;;;;;;;;1646:15:4;1635:8;:26;;;;1561:105;:::o;8783:91:3:-;8828:6;8848:9;:21;8858:10;8848:21;;;;;;;;;;;;;;;8841:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8783:91;:::o;3538:28::-;;;;;;;;;;;;;:::o;4544:27::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1274:103:6:-;719:5;;;;;;;;;;;705:19;;:10;:19;;;697:28;;;;;;;;1343:29;1362:9;1343:18;:29::i;:::-;1274:103;:::o;1035:326:4:-;5990:4:3;5961:33;;:25;5975:10;5961:13;:25::i;:::-;:33;;;5953:42;;;;;;;;1157:4:4;1128:33;;:25;1142:10;1128:13;:25::i;:::-;:33;;;1120:42;;;;;;;;1201:8;;1172:3;;;;;;;;;;;:13;;;1186:10;1172:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1172:25:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1172:25:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1172:25:4;;;;;;;;;;;;;;;;:37;;1164:46;;;;;;;;1212:5;;;;;;;;;;;:18;;;1231:10;1243:8;;1212:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1212:40:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1212:40:4;;;;1254:14;;:16;;;;;;;;;;;;;1272:5;;;;;;;;;;;:22;;;1296:7;1306;1315:10;1272:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1272:54:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1272:54:4;;;;1333:23;1348:7;1333:23;;;;;;;;;;;;;;;;;;;;;;1035:326;;:::o;1846:250:2:-;1892:4;1935:8;1913:19;;:30;1906:3;:37;;1903:159;;;1989:1;1971:15;;:19;;;;;;;;1953:15;:37;;;;2020:3;1998:19;:25;;;;2038:15;;2031:22;;;;1903:159;2076:15;;2069:22;;1846:250;;:::o;6757:75:3:-;6805:5;;;;;;;;;;;:16;;;6822:4;6805:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6805:22:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6805:22:3;;;;6757:75;:::o;1512:171:6:-;1603:1;1582:23;;:9;:23;;;;1574:32;;;;;;;;1645:9;1617:38;;1638:5;;;;;;;;;;;1617:38;;;;;;;;;;;;1669:9;1661:5;;:17;;;;;;;;;;;;;;;;;;1512:171;:::o",
  "source": "pragma solidity ^0.4.21;\nimport \"./IBLogic.sol\";\n////////////////////////////////////////////////////////////////////////////////////////////\n/// @title RBLogic Contract for the CryptoPatent Blockchain\n/// @author DecentraCorp\n/// @notice this contract is the third contract in the CryptoPatent Blockchain\n/// @dev All function calls are currently implement without side effects\n////////////////////////////////////////////////////////////////////////////////////////////\n\n/// @author Christopher Dixon\n/// @dev this contract contains the cryptopatent interface for the IdeaBlock contract\ncontract RBLogic is IBLogic{\n\n///@notice generateReplicationBlock is used to generate a replication block when someone sucessfully replicates an Idea\n///@dev this requires the replicator has enough IdeaCoin to meet the stake amount and burns it from existence\n///@dev it also adds the replicator as a member of DecentraCorp\n///@dev finally, this contract calls the Proof of Replication Ownership contract and mints a PoRO token to the msg.sender\nfunction generateReplicationBlock(uint _ideaId, address _repAdd) public onlyMember {\nrequire(checkIfMember(msg.sender) == true);\nrequire(IDC.balanceOf(msg.sender) >= repStake);\nDCPoA.proxyIDCBurn(msg.sender, repStake);\nglobalRepCount++;\nDCPoA.replicationBlock( _ideaId,  _repAdd, msg.sender);\nemit NewReplication(_repAdd);\n  }\n///@notice changeStakeAmount will allow the community to change the stake amount required to stake a replication if it sees fit through a voted\n///@dev this new amount must account for 18 decimals\n  function changeStakeAmount(uint _newStakeAmount) external onlyOwner {\n    repStake = _newStakeAmount;\n  }\n}\n",
  "sourcePath": "/home/stan36/repos/DecentraCorp/contracts/CryptoPatent/RBLogic.sol",
  "ast": {
    "absolutePath": "/home/stan36/repos/DecentraCorp/contracts/CryptoPatent/RBLogic.sol",
    "exportedSymbols": {
      "RBLogic": [
        1451
      ]
    },
    "id": 1452,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1382,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".21"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:4"
      },
      {
        "absolutePath": "/home/stan36/repos/DecentraCorp/contracts/CryptoPatent/IBLogic.sol",
        "file": "./IBLogic.sol",
        "id": 1383,
        "nodeType": "ImportDirective",
        "scope": 1452,
        "sourceUnit": 851,
        "src": "25:23:4",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1384,
              "name": "IBLogic",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 850,
              "src": "609:7:4",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IBLogic_$850",
                "typeString": "contract IBLogic"
              }
            },
            "id": 1385,
            "nodeType": "InheritanceSpecifier",
            "src": "609:7:4"
          }
        ],
        "contractDependencies": [
          850,
          1380,
          1720
        ],
        "contractKind": "contract",
        "documentation": "/////////////////////////////////////////////////////////////////////////////////////////\n @title RBLogic Contract for the CryptoPatent Blockchain\n @author DecentraCorp\n @notice this contract is the third contract in the CryptoPatent Blockchain\n @dev All function calls are currently implement without side effects\n/////////////////////////////////////////////////////////////////////////////////////////\n @author Christopher Dixon\n @dev this contract contains the cryptopatent interface for the IdeaBlock contract",
        "fullyImplemented": true,
        "id": 1451,
        "linearizedBaseContracts": [
          1451,
          850,
          1380,
          1720
        ],
        "name": "RBLogic",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1437,
              "nodeType": "Block",
              "src": "1118:243:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 1400,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1396,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1735,
                                "src": "1142:3:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1397,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "1142:10:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 1395,
                            "name": "checkIfMember",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1321,
                            "src": "1128:13:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                              "typeString": "function (address) view returns (bool)"
                            }
                          },
                          "id": 1398,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1128:25:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "74727565",
                          "id": 1399,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1157:4:4",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "src": "1128:33:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 1394,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1738,
                        1739
                      ],
                      "referencedDeclaration": 1738,
                      "src": "1120:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 1401,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1120:42:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1402,
                  "nodeType": "ExpressionStatement",
                  "src": "1120:42:4"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1410,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1406,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1735,
                                "src": "1186:3:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1407,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "1186:10:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 1404,
                              "name": "IDC",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1070,
                              "src": "1172:3:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IdeaCoin_$944",
                                "typeString": "contract IdeaCoin"
                              }
                            },
                            "id": 1405,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "balanceOf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 938,
                            "src": "1172:13:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) view external returns (uint256)"
                            }
                          },
                          "id": 1408,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1172:25:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 1409,
                          "name": "repStake",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1088,
                          "src": "1201:8:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1172:37:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 1403,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1738,
                        1739
                      ],
                      "referencedDeclaration": 1738,
                      "src": "1164:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 1411,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1164:46:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1412,
                  "nodeType": "ExpressionStatement",
                  "src": "1164:46:4"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1416,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1735,
                          "src": "1231:3:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1417,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "1231:10:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1418,
                        "name": "repStake",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1088,
                        "src": "1243:8:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1413,
                        "name": "DCPoA",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1072,
                        "src": "1212:5:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_DecentraCorpPoA_$931",
                          "typeString": "contract DecentraCorpPoA"
                        }
                      },
                      "id": 1415,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "proxyIDCBurn",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 867,
                      "src": "1212:18:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256) external"
                      }
                    },
                    "id": 1419,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1212:40:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1420,
                  "nodeType": "ExpressionStatement",
                  "src": "1212:40:4"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1422,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "++",
                    "prefix": false,
                    "src": "1254:16:4",
                    "subExpression": {
                      "argumentTypes": null,
                      "id": 1421,
                      "name": "globalRepCount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1078,
                      "src": "1254:14:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1423,
                  "nodeType": "ExpressionStatement",
                  "src": "1254:16:4"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1427,
                        "name": "_ideaId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1387,
                        "src": "1296:7:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1428,
                        "name": "_repAdd",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1389,
                        "src": "1306:7:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1429,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1735,
                          "src": "1315:3:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1430,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "1315:10:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1424,
                        "name": "DCPoA",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1072,
                        "src": "1272:5:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_DecentraCorpPoA_$931",
                          "typeString": "contract DecentraCorpPoA"
                        }
                      },
                      "id": 1426,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "replicationBlock",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 903,
                      "src": "1272:22:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (uint256,address,address) external"
                      }
                    },
                    "id": 1431,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1272:54:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1432,
                  "nodeType": "ExpressionStatement",
                  "src": "1272:54:4"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1434,
                        "name": "_repAdd",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1389,
                        "src": "1348:7:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 1433,
                      "name": "NewReplication",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1137,
                      "src": "1333:14:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 1435,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1333:23:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1436,
                  "nodeType": "EmitStatement",
                  "src": "1328:28:4"
                }
              ]
            },
            "documentation": "@notice generateReplicationBlock is used to generate a replication block when someone sucessfully replicates an Idea\n@dev this requires the replicator has enough IdeaCoin to meet the stake amount and burns it from existence\n@dev it also adds the replicator as a member of DecentraCorp\n@dev finally, this contract calls the Proof of Replication Ownership contract and mints a PoRO token to the msg.sender",
            "id": 1438,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [
              {
                "arguments": null,
                "id": 1392,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1391,
                  "name": "onlyMember",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1185,
                  "src": "1107:10:4",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1107:10:4"
              }
            ],
            "name": "generateReplicationBlock",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1390,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1387,
                  "name": "_ideaId",
                  "nodeType": "VariableDeclaration",
                  "scope": 1438,
                  "src": "1069:12:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1386,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1069:4:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1389,
                  "name": "_repAdd",
                  "nodeType": "VariableDeclaration",
                  "scope": 1438,
                  "src": "1083:15:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1388,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1083:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1068:31:4"
            },
            "payable": false,
            "returnParameters": {
              "id": 1393,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1118:0:4"
            },
            "scope": 1451,
            "src": "1035:326:4",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1449,
              "nodeType": "Block",
              "src": "1629:37:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1447,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1445,
                      "name": "repStake",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1088,
                      "src": "1635:8:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 1446,
                      "name": "_newStakeAmount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1440,
                      "src": "1646:15:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1635:26:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1448,
                  "nodeType": "ExpressionStatement",
                  "src": "1635:26:4"
                }
              ]
            },
            "documentation": "@notice changeStakeAmount will allow the community to change the stake amount required to stake a replication if it sees fit through a voted\n@dev this new amount must account for 18 decimals",
            "id": 1450,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [
              {
                "arguments": null,
                "id": 1443,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1442,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1668,
                  "src": "1619:9:4",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1619:9:4"
              }
            ],
            "name": "changeStakeAmount",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1441,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1440,
                  "name": "_newStakeAmount",
                  "nodeType": "VariableDeclaration",
                  "scope": 1450,
                  "src": "1588:20:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1439,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1588:4:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1587:22:4"
            },
            "payable": false,
            "returnParameters": {
              "id": 1444,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1629:0:4"
            },
            "scope": 1451,
            "src": "1561:105:4",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 1452,
        "src": "589:1079:4"
      }
    ],
    "src": "0:1669:4"
  },
  "legacyAST": {
    "absolutePath": "/home/stan36/repos/DecentraCorp/contracts/CryptoPatent/RBLogic.sol",
    "exportedSymbols": {
      "RBLogic": [
        1451
      ]
    },
    "id": 1452,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1382,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".21"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:4"
      },
      {
        "absolutePath": "/home/stan36/repos/DecentraCorp/contracts/CryptoPatent/IBLogic.sol",
        "file": "./IBLogic.sol",
        "id": 1383,
        "nodeType": "ImportDirective",
        "scope": 1452,
        "sourceUnit": 851,
        "src": "25:23:4",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1384,
              "name": "IBLogic",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 850,
              "src": "609:7:4",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IBLogic_$850",
                "typeString": "contract IBLogic"
              }
            },
            "id": 1385,
            "nodeType": "InheritanceSpecifier",
            "src": "609:7:4"
          }
        ],
        "contractDependencies": [
          850,
          1380,
          1720
        ],
        "contractKind": "contract",
        "documentation": "/////////////////////////////////////////////////////////////////////////////////////////\n @title RBLogic Contract for the CryptoPatent Blockchain\n @author DecentraCorp\n @notice this contract is the third contract in the CryptoPatent Blockchain\n @dev All function calls are currently implement without side effects\n/////////////////////////////////////////////////////////////////////////////////////////\n @author Christopher Dixon\n @dev this contract contains the cryptopatent interface for the IdeaBlock contract",
        "fullyImplemented": true,
        "id": 1451,
        "linearizedBaseContracts": [
          1451,
          850,
          1380,
          1720
        ],
        "name": "RBLogic",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1437,
              "nodeType": "Block",
              "src": "1118:243:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 1400,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1396,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1735,
                                "src": "1142:3:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1397,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "1142:10:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 1395,
                            "name": "checkIfMember",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1321,
                            "src": "1128:13:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                              "typeString": "function (address) view returns (bool)"
                            }
                          },
                          "id": 1398,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1128:25:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "74727565",
                          "id": 1399,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1157:4:4",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "src": "1128:33:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 1394,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1738,
                        1739
                      ],
                      "referencedDeclaration": 1738,
                      "src": "1120:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 1401,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1120:42:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1402,
                  "nodeType": "ExpressionStatement",
                  "src": "1120:42:4"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1410,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1406,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1735,
                                "src": "1186:3:4",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1407,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "1186:10:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 1404,
                              "name": "IDC",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1070,
                              "src": "1172:3:4",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IdeaCoin_$944",
                                "typeString": "contract IdeaCoin"
                              }
                            },
                            "id": 1405,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "balanceOf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 938,
                            "src": "1172:13:4",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) view external returns (uint256)"
                            }
                          },
                          "id": 1408,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1172:25:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 1409,
                          "name": "repStake",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1088,
                          "src": "1201:8:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1172:37:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 1403,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        1738,
                        1739
                      ],
                      "referencedDeclaration": 1738,
                      "src": "1164:7:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 1411,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1164:46:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1412,
                  "nodeType": "ExpressionStatement",
                  "src": "1164:46:4"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1416,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1735,
                          "src": "1231:3:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1417,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "1231:10:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1418,
                        "name": "repStake",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1088,
                        "src": "1243:8:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1413,
                        "name": "DCPoA",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1072,
                        "src": "1212:5:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_DecentraCorpPoA_$931",
                          "typeString": "contract DecentraCorpPoA"
                        }
                      },
                      "id": 1415,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "proxyIDCBurn",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 867,
                      "src": "1212:18:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256) external"
                      }
                    },
                    "id": 1419,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1212:40:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1420,
                  "nodeType": "ExpressionStatement",
                  "src": "1212:40:4"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1422,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "++",
                    "prefix": false,
                    "src": "1254:16:4",
                    "subExpression": {
                      "argumentTypes": null,
                      "id": 1421,
                      "name": "globalRepCount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1078,
                      "src": "1254:14:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1423,
                  "nodeType": "ExpressionStatement",
                  "src": "1254:16:4"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1427,
                        "name": "_ideaId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1387,
                        "src": "1296:7:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1428,
                        "name": "_repAdd",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1389,
                        "src": "1306:7:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1429,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1735,
                          "src": "1315:3:4",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1430,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "1315:10:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1424,
                        "name": "DCPoA",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1072,
                        "src": "1272:5:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_DecentraCorpPoA_$931",
                          "typeString": "contract DecentraCorpPoA"
                        }
                      },
                      "id": 1426,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "replicationBlock",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 903,
                      "src": "1272:22:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (uint256,address,address) external"
                      }
                    },
                    "id": 1431,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1272:54:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1432,
                  "nodeType": "ExpressionStatement",
                  "src": "1272:54:4"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1434,
                        "name": "_repAdd",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1389,
                        "src": "1348:7:4",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 1433,
                      "name": "NewReplication",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1137,
                      "src": "1333:14:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 1435,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1333:23:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1436,
                  "nodeType": "EmitStatement",
                  "src": "1328:28:4"
                }
              ]
            },
            "documentation": "@notice generateReplicationBlock is used to generate a replication block when someone sucessfully replicates an Idea\n@dev this requires the replicator has enough IdeaCoin to meet the stake amount and burns it from existence\n@dev it also adds the replicator as a member of DecentraCorp\n@dev finally, this contract calls the Proof of Replication Ownership contract and mints a PoRO token to the msg.sender",
            "id": 1438,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [
              {
                "arguments": null,
                "id": 1392,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1391,
                  "name": "onlyMember",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1185,
                  "src": "1107:10:4",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1107:10:4"
              }
            ],
            "name": "generateReplicationBlock",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1390,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1387,
                  "name": "_ideaId",
                  "nodeType": "VariableDeclaration",
                  "scope": 1438,
                  "src": "1069:12:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1386,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1069:4:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1389,
                  "name": "_repAdd",
                  "nodeType": "VariableDeclaration",
                  "scope": 1438,
                  "src": "1083:15:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1388,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1083:7:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1068:31:4"
            },
            "payable": false,
            "returnParameters": {
              "id": 1393,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1118:0:4"
            },
            "scope": 1451,
            "src": "1035:326:4",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1449,
              "nodeType": "Block",
              "src": "1629:37:4",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1447,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1445,
                      "name": "repStake",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1088,
                      "src": "1635:8:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 1446,
                      "name": "_newStakeAmount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1440,
                      "src": "1646:15:4",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1635:26:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 1448,
                  "nodeType": "ExpressionStatement",
                  "src": "1635:26:4"
                }
              ]
            },
            "documentation": "@notice changeStakeAmount will allow the community to change the stake amount required to stake a replication if it sees fit through a voted\n@dev this new amount must account for 18 decimals",
            "id": 1450,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [
              {
                "arguments": null,
                "id": 1443,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1442,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1668,
                  "src": "1619:9:4",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1619:9:4"
              }
            ],
            "name": "changeStakeAmount",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1441,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1440,
                  "name": "_newStakeAmount",
                  "nodeType": "VariableDeclaration",
                  "scope": 1450,
                  "src": "1588:20:4",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1439,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1588:4:4",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1587:22:4"
            },
            "payable": false,
            "returnParameters": {
              "id": 1444,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1629:0:4"
            },
            "scope": 1451,
            "src": "1561:105:4",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 1452,
        "src": "589:1079:4"
      }
    ],
    "src": "0:1669:4"
  },
  "compiler": {
    "name": "solc",
    "version": "0.4.24+commit.e67f0147.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "2.0.1",
  "updatedAt": "2018-12-25T02:36:53.919Z"
}